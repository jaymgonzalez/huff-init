#define function addTwo(uint256,uint256) view returns(uint256)

#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    __FUNC_SIG(addTwo) eq addTwo jumpi

    addTwo:
        ADD_TWO()
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    add                   // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

// BYTECODE          MNEMONIC         STACK                 ACTION
//  60 00          // PUSH1 0x00       // [0x00]
//  35             // CALLDATALOAD     // [number1]          Store the first 32 bytes on the stack
//  60 20          // PUSH1 0x20       // [0x20, number1]
//  35             // CALLDATALOAD     // [number2, number1] Store the second 32 bytes on the stack
//  01             // ADD              // [number2+number1]  Take two stack inputs and add the result
//  60 00          // PUSH1 0x00       // [0x0, (n2+n1)]
//  52             // MSTORE           // []                 Store (n2+n1) in the first 32 bytes of memory
//  60 20          // PUSH1 0x20       // [0x20]
//  60 00          // PUSH1 0x00       // [0x00, 0x20]
//  f3             // RETURN           // []                 Return the first 32 bytes of memory